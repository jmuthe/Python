
LED_ON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000254  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003fc  08000404  00010404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003fc  080003fc  00010404  2**0
                  CONTENTS
  4 .ARM          00000000  080003fc  080003fc  00010404  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003fc  08000404  00010404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000400  08000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010404  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010404  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a7a  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001cd  00000000  00000000  00010eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00011080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000030  00000000  00000000  000110c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001cba  00000000  00000000  000110f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000677  00000000  00000000  00012db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007f9d  00000000  00000000  00013429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001b3c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  0001b41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003e4 	.word	0x080003e4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003e4 	.word	0x080003e4

080001e8 <main>:
#include <stdio.h>



int main(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b08f      	sub	sp, #60	; 0x3c
 80001ec:	af00      	add	r7, sp, #0
	uint32_t * RCC= (uint32_t*) 0x40023800;
 80001ee:	4b51      	ldr	r3, [pc, #324]	; (8000334 <main+0x14c>)
 80001f0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t * RCC_AHB1 =RCC +12;
 80001f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001f4:	3330      	adds	r3, #48	; 0x30
 80001f6:	623b      	str	r3, [r7, #32]
	uint32_t * GPIOD= 0x40020C00;
 80001f8:	4b4f      	ldr	r3, [pc, #316]	; (8000338 <main+0x150>)
 80001fa:	61fb      	str	r3, [r7, #28]
	uint32_t * GPIOD_MODER= GPIOD + 0;
 80001fc:	69fb      	ldr	r3, [r7, #28]
 80001fe:	61bb      	str	r3, [r7, #24]
	uint32_t * GPIOD_ODR= GPIOD + 5;
 8000200:	69fb      	ldr	r3, [r7, #28]
 8000202:	3314      	adds	r3, #20
 8000204:	617b      	str	r3, [r7, #20]
	uint32_t * GPIOA= 0x40020000 ;
 8000206:	4b4d      	ldr	r3, [pc, #308]	; (800033c <main+0x154>)
 8000208:	613b      	str	r3, [r7, #16]
	uint32_t * GPIOA_MODER= GPIOA + 0;
 800020a:	693b      	ldr	r3, [r7, #16]
 800020c:	60fb      	str	r3, [r7, #12]
	uint32_t * GPIOA_IDR= GPIOA + 4;
 800020e:	693b      	ldr	r3, [r7, #16]
 8000210:	3310      	adds	r3, #16
 8000212:	60bb      	str	r3, [r7, #8]
	uint32_t * GPIOA_PUPDR= GPIOA + 3;
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	330c      	adds	r3, #12
 8000218:	607b      	str	r3, [r7, #4]

	*RCC_AHB1 |=1<<3; //Set GPIOD clock
 800021a:	6a3b      	ldr	r3, [r7, #32]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 0208 	orr.w	r2, r3, #8
 8000222:	6a3b      	ldr	r3, [r7, #32]
 8000224:	601a      	str	r2, [r3, #0]
	*RCC_AHB1 |=1<<0; //Set GPIOA clock
 8000226:	6a3b      	ldr	r3, [r7, #32]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 0201 	orr.w	r2, r3, #1
 800022e:	6a3b      	ldr	r3, [r7, #32]
 8000230:	601a      	str	r2, [r3, #0]
	* GPIOD_MODER &=~(5<<24);
 8000232:	69bb      	ldr	r3, [r7, #24]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f023 62a0 	bic.w	r2, r3, #83886080	; 0x5000000
 800023a:	69bb      	ldr	r3, [r7, #24]
 800023c:	601a      	str	r2, [r3, #0]
	* GPIOD_MODER |=0x05<<24 ;// Set  PD13 and PD12 to output
 800023e:	69bb      	ldr	r3, [r7, #24]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f043 62a0 	orr.w	r2, r3, #83886080	; 0x5000000
 8000246:	69bb      	ldr	r3, [r7, #24]
 8000248:	601a      	str	r2, [r3, #0]
	* GPIOA_MODER &=~(1<<0) ;// Set  PA0 to input
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f023 0201 	bic.w	r2, r3, #1
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	601a      	str	r2, [r3, #0]
	* GPIOA_PUPDR &=~(3<<0);
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f023 0203 	bic.w	r2, r3, #3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]
	* GPIOA_PUPDR |=(2<<0);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f043 0202 	orr.w	r2, r3, #2
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]


	while(1)
	{
		uint32_t j= * GPIOA_IDR & 1<<0;
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f003 0301 	and.w	r3, r3, #1
 8000276:	603b      	str	r3, [r7, #0]
		if (j==0)
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d12c      	bne.n	80002d8 <main+0xf0>
		{
			* GPIOD_ODR	|= 1<<13  ; //Set PD13 to high
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	601a      	str	r2, [r3, #0]
			* GPIOD_ODR &= ~(1<<12) ;//Set PD12 to low
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	601a      	str	r2, [r3, #0]
			for (uint32_t i=0; i<1000000; i++);
 8000296:	2300      	movs	r3, #0
 8000298:	637b      	str	r3, [r7, #52]	; 0x34
 800029a:	e002      	b.n	80002a2 <main+0xba>
 800029c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800029e:	3301      	adds	r3, #1
 80002a0:	637b      	str	r3, [r7, #52]	; 0x34
 80002a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002a4:	4a26      	ldr	r2, [pc, #152]	; (8000340 <main+0x158>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <main+0xb4>
			* GPIOD_ODR &= ~(1<<13) ;//Set PD13 to low
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	601a      	str	r2, [r3, #0]
			* GPIOD_ODR	|= 1<<12  ; //Set PD12 to high
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	601a      	str	r2, [r3, #0]
			for (uint32_t i=0; i<1000000; i++);
 80002c2:	2300      	movs	r3, #0
 80002c4:	633b      	str	r3, [r7, #48]	; 0x30
 80002c6:	e002      	b.n	80002ce <main+0xe6>
 80002c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002ca:	3301      	adds	r3, #1
 80002cc:	633b      	str	r3, [r7, #48]	; 0x30
 80002ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002d0:	4a1b      	ldr	r2, [pc, #108]	; (8000340 <main+0x158>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d9f8      	bls.n	80002c8 <main+0xe0>
 80002d6:	e7ca      	b.n	800026e <main+0x86>
		}
		else
		{
			* GPIOD_ODR	|= 1<<13  ; //Set PD13 to high
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	601a      	str	r2, [r3, #0]
			* GPIOD_ODR &= ~(1<<12) ;//Set PD12 to low
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	601a      	str	r2, [r3, #0]
			for (uint32_t i=0; i<100000; i++);
 80002f0:	2300      	movs	r3, #0
 80002f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002f4:	e002      	b.n	80002fc <main+0x114>
 80002f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002f8:	3301      	adds	r3, #1
 80002fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002fe:	4a11      	ldr	r2, [pc, #68]	; (8000344 <main+0x15c>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d9f8      	bls.n	80002f6 <main+0x10e>
			* GPIOD_ODR &= ~(1<<13) ;//Set PD13 to low
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	601a      	str	r2, [r3, #0]
			* GPIOD_ODR	|= 1<<12  ; //Set PD12 to high
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	601a      	str	r2, [r3, #0]
			for (uint32_t i=0; i<100000; i++);
 800031c:	2300      	movs	r3, #0
 800031e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000320:	e002      	b.n	8000328 <main+0x140>
 8000322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000324:	3301      	adds	r3, #1
 8000326:	62bb      	str	r3, [r7, #40]	; 0x28
 8000328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800032a:	4a06      	ldr	r2, [pc, #24]	; (8000344 <main+0x15c>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d9f8      	bls.n	8000322 <main+0x13a>
	{
 8000330:	e79d      	b.n	800026e <main+0x86>
 8000332:	bf00      	nop
 8000334:	40023800 	.word	0x40023800
 8000338:	40020c00 	.word	0x40020c00
 800033c:	40020000 	.word	0x40020000
 8000340:	000f423f 	.word	0x000f423f
 8000344:	0001869f 	.word	0x0001869f

08000348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000348:	480d      	ldr	r0, [pc, #52]	; (8000380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800034c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000350:	480c      	ldr	r0, [pc, #48]	; (8000384 <LoopForever+0x6>)
  ldr r1, =_edata
 8000352:	490d      	ldr	r1, [pc, #52]	; (8000388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000354:	4a0d      	ldr	r2, [pc, #52]	; (800038c <LoopForever+0xe>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000358:	e002      	b.n	8000360 <LoopCopyDataInit>

0800035a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800035c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035e:	3304      	adds	r3, #4

08000360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000364:	d3f9      	bcc.n	800035a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000366:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000368:	4c0a      	ldr	r4, [pc, #40]	; (8000394 <LoopForever+0x16>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800036c:	e001      	b.n	8000372 <LoopFillZerobss>

0800036e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000370:	3204      	adds	r2, #4

08000372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000374:	d3fb      	bcc.n	800036e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000376:	f000 f811 	bl	800039c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037a:	f7ff ff35 	bl	80001e8 <main>

0800037e <LoopForever>:

LoopForever:
    b LoopForever
 800037e:	e7fe      	b.n	800037e <LoopForever>
  ldr   r0, =_estack
 8000380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800038c:	08000404 	.word	0x08000404
  ldr r2, =_sbss
 8000390:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000394:	2000001c 	.word	0x2000001c

08000398 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC_IRQHandler>
	...

0800039c <__libc_init_array>:
 800039c:	b570      	push	{r4, r5, r6, lr}
 800039e:	4d0d      	ldr	r5, [pc, #52]	; (80003d4 <__libc_init_array+0x38>)
 80003a0:	4c0d      	ldr	r4, [pc, #52]	; (80003d8 <__libc_init_array+0x3c>)
 80003a2:	1b64      	subs	r4, r4, r5
 80003a4:	10a4      	asrs	r4, r4, #2
 80003a6:	2600      	movs	r6, #0
 80003a8:	42a6      	cmp	r6, r4
 80003aa:	d109      	bne.n	80003c0 <__libc_init_array+0x24>
 80003ac:	4d0b      	ldr	r5, [pc, #44]	; (80003dc <__libc_init_array+0x40>)
 80003ae:	4c0c      	ldr	r4, [pc, #48]	; (80003e0 <__libc_init_array+0x44>)
 80003b0:	f000 f818 	bl	80003e4 <_init>
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	10a4      	asrs	r4, r4, #2
 80003b8:	2600      	movs	r6, #0
 80003ba:	42a6      	cmp	r6, r4
 80003bc:	d105      	bne.n	80003ca <__libc_init_array+0x2e>
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c4:	4798      	blx	r3
 80003c6:	3601      	adds	r6, #1
 80003c8:	e7ee      	b.n	80003a8 <__libc_init_array+0xc>
 80003ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ce:	4798      	blx	r3
 80003d0:	3601      	adds	r6, #1
 80003d2:	e7f2      	b.n	80003ba <__libc_init_array+0x1e>
 80003d4:	080003fc 	.word	0x080003fc
 80003d8:	080003fc 	.word	0x080003fc
 80003dc:	080003fc 	.word	0x080003fc
 80003e0:	08000400 	.word	0x08000400

080003e4 <_init>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr

080003f0 <_fini>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr
